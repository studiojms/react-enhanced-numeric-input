{"version":3,"sources":["webpack:///../src/NumericInput.tsx","webpack:///../docs/Docs.mdx","webpack:///../node_modules/classnames/index.js"],"names":["NumericInput","props","inputRef","React","state","formattedValue","value","onChange","bind","onBlur","componentDidMount","this","setState","formatWithZeroes","replace","decimalSeparator","decimalPrecision","componentDidUpdate","prevProps","isNaN","Number","render","decimalPattern","className","classnames","percent","money","data-percent","data-money","moneyMask","disabled","autoFocus","name","style","maxLength","pattern","type","id","ref","placeholder","onFocus","onKeyPress","e","target","validity","valid","decimalNotationLength","length","calculatedMaxLength","val","decimalPlaces","substr","String","missingPlaces","paddingZeroes","separator","separatorPosition","indexOf","hasSeparator","i","partialFormattedValue","split","getReturnValue","baseValue","returnValue","stringValueOnBlur","parseFloat","valor","isNumberAcceptable","defaultOptions","setDefaultMoneyMask","setDefaultPercent","setDefaultDecimalSeparator","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","of","__position","__code","__scope","Playground","Props","console","log","isMDXComponent","hasOwn","hasOwnProperty","classNames","classes","arguments","arg","argType","push","Array","isArray","inner","apply","key","call","join","module","exports"],"mappings":"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","file":"component---docs-docs-mdx-5704b454bab502c61444.js","sourcesContent":["import * as classnames from \"classnames\";\nimport * as React from \"react\";\n\nimport \"./assets/styles.css\";\n\ninterface INumericInputProps {\n  className?: string;\n  decimalPrecision?: number;\n  decimalSeparator?: string;\n  disabled?: boolean;\n  autoFocus?: boolean;\n  maxLength?: number;\n  id?: string;\n  name?: string;\n  placeholder?: string;\n  onChange?: (e: React.ChangeEvent) => void;\n  onBlur?: (e: React.ChangeEvent, value: any) => void;\n  onClick?: () => void;\n  onFocus?: () => void;\n  onKeyPress?: () => void;\n  style?: Record<string, any>;\n  value?: string | number;\n  percent?: boolean;\n  money?: boolean;\n  moneyMask?: string;\n  stringValueOnBlur?: boolean;\n}\n\ninterface INumericInputState {\n  formattedValue: string;\n  value: string | number;\n}\n\n/**\n * Input que aceita apenas valores numéricos.\n *\n * Para recuperar o valor no tipo number, ao ser executado o método onBlur são passados dois parâmetros, event e value.\n * O parâmetro value é o valor numérico, podendo ser enviado texto de acordo com o valor do parâmetro stringValueOnBlur\n *\n * @param money {boolean} indica que o componente é do tipo monetário, exibindo um ícone com o símbolo monetário ao lado do input\n * @param percent {boolean} indica que o componente é do tipo percentual, exibindo um ícone com o símbolo porcento ao lado do input\n * @param stringValueOnBlur {boolean} indica que ao ser executado o método onBlur, o argumento value enviado seja do tipo string.\n */\nclass NumericInput extends React.Component<INumericInputProps, INumericInputState> {\n  private inputRef = React.createRef<HTMLInputElement>();\n\n  constructor(props: INumericInputProps) {\n    super(props);\n    this.state = {\n      formattedValue: \"\",\n      value: null,\n    };\n\n    this.onChange = this.onChange.bind(this);\n    this.onBlur = this.onBlur.bind(this);\n  }\n\n  private get decimalSeparator(): string {\n    return this.props.decimalSeparator || defaultOptions.decimalSeparator;\n  }\n\n  private get moneyMask(): string {\n    return this.props.moneyMask || defaultOptions.moneyMask;\n  }\n\n  private get percent(): string {\n    return defaultOptions.percent;\n  }\n\n  private get maxLength(): number {\n    return this.props.maxLength || 15;\n  }\n\n  public componentDidMount() {\n    this.setState({\n      formattedValue: this.formatWithZeroes(\n        `${this.props.value != null ? this.props.value : \"\"}`.replace(/\\./g, this.decimalSeparator),\n        this.props.decimalPrecision\n      ),\n      value: this.props.value,\n    });\n  }\n\n  public componentDidUpdate(prevProps: INumericInputProps) {\n    const { value } = this.props;\n\n    if (!isNaN(Number(value)) && value !== prevProps.value && this.state.formattedValue !== value) {\n      this.setState({\n        formattedValue: this.formatWithZeroes(\n          `${value != null ? value : \"\"}`.replace(/\\./g, this.decimalSeparator),\n          this.props.decimalPrecision\n        ),\n        value,\n      });\n    }\n  }\n\n  public render() {\n    const { props } = this;\n\n    const numericPattern = \"^[-]?[0-9]*\";\n    const decimalPattern = `^[-]?[0-9]*(${this.decimalSeparator}{1}[0-9]*)?`;\n\n    return (\n      <div\n        className={classnames(\"ni-numeric-input\", { percent: props.percent, money: props.money })}\n        data-percent={props.percent ? this.percent : \"\"}\n        data-money={props.money ? this.moneyMask : \"\"}\n      >\n        <input\n          className={classnames(\"ni-text-right\", props.className)}\n          disabled={props.disabled}\n          autoFocus={props.autoFocus}\n          name={props.name}\n          style={this.props.style}\n          maxLength={this.maxLength}\n          pattern={props.decimalPrecision > 0 ? decimalPattern : numericPattern}\n          type=\"text\"\n          id={props.id}\n          ref={this.inputRef}\n          value={this.state.formattedValue != null ? this.state.formattedValue : \"\"}\n          placeholder={props.placeholder}\n          onChange={this.onChange}\n          onBlur={this.onBlur}\n          onFocus={this.props.onFocus}\n          onKeyPress={this.props.onKeyPress}\n        />\n      </div>\n    );\n  }\n\n  private onChange(e: React.ChangeEvent<HTMLInputElement>) {\n    if (e.target.validity.valid) {\n      const decimalNotationLength =\n        this.props.decimalPrecision > 0 && this.props.decimalPrecision + this.decimalSeparator.length;\n      const calculatedMaxLength = this.maxLength + decimalNotationLength;\n\n      if (e.target.value.length <= calculatedMaxLength) {\n        const value = e.target.value;\n        this.setState({ formattedValue: value });\n        if (this.props.onChange) {\n          this.props.onChange(e);\n        }\n      }\n    }\n  }\n\n  private formatWithZeroes(val: string, decimalPlaces: number): string {\n    let formattedValue = val;\n\n    const decimalNotationLength =\n      this.props.decimalPrecision > 0 && this.props.decimalPrecision + this.decimalSeparator.length;\n    const calculatedMaxLength = this.maxLength - decimalNotationLength;\n\n    if (formattedValue.length > this.maxLength) {\n      formattedValue = formattedValue.substr(0, this.maxLength);\n    }\n\n    if (\n      val !== \"\" &&\n      val !== null &&\n      decimalPlaces !== null &&\n      decimalPlaces > 0 &&\n      val.length <= calculatedMaxLength\n    ) {\n      val = String(val);\n\n      let paddingZeroes = \"\";\n      const separator = this.decimalSeparator;\n      const separatorPosition = val.indexOf(separator);\n      const hasSeparator = separatorPosition > 0;\n      let missingPlaces;\n\n      if (hasSeparator) {\n        missingPlaces = decimalPlaces - val.substr(separatorPosition + 1).length;\n      } else {\n        missingPlaces = decimalPlaces - (separatorPosition + 1);\n      }\n\n      for (let i = 1; i <= missingPlaces; i++) {\n        paddingZeroes += \"0\";\n      }\n\n      const partialFormattedValue = `${val}${hasSeparator ? \"\" : separator}${paddingZeroes}`;\n\n      formattedValue =\n        partialFormattedValue.split(separator)[0] +\n        separator +\n        partialFormattedValue.split(separator)[1].substr(0, decimalPlaces);\n    }\n\n    return formattedValue;\n  }\n\n  private getReturnValue(baseValue: string) {\n    let returnValue = null;\n    if (this.props.stringValueOnBlur) {\n      returnValue = baseValue;\n    } else {\n      const isNumberAcceptable = baseValue && baseValue.length <= 15;\n      returnValue = isNumberAcceptable ? parseFloat(baseValue.replace(this.decimalSeparator, \".\")) : baseValue;\n    }\n\n    return returnValue;\n  }\n\n  private onBlur(e: React.ChangeEvent<HTMLInputElement>) {\n    const { decimalPrecision } = this.props;\n    let valor = e.target.value;\n    const formattedValue = this.formatWithZeroes(valor, decimalPrecision);\n\n    if (valor !== \"\" && formattedValue.length <= this.maxLength && !isNaN(Number(valor))) {\n      valor = formattedValue;\n\n      if (valor.indexOf(`-0${this.decimalSeparator}`) >= 0) {\n        // remove signal if values is greater than 0\n        valor = valor.substr(1, valor.length);\n      }\n\n      this.setState({ value: this.getReturnValue(valor), formattedValue: valor });\n      e.target.value = valor;\n    }\n\n    if (this.props.onBlur) {\n      const isNumberAcceptable = valor !== \"\" && valor !== null && valor.length <= 15;\n      this.props.onBlur(e, isNumberAcceptable ? parseFloat(valor.replace(this.decimalSeparator, \".\")) : valor);\n    }\n  }\n}\n\nconst defaultOptions = {\n  decimalSeparator: \",\",\n  moneyMask: \"$\",\n  percent: \"%\",\n};\n\nexport function setDefaultMoneyMask(moneyMask: string) {\n  defaultOptions.moneyMask = moneyMask;\n}\n\nexport function setDefaultPercent(percent: string) {\n  defaultOptions.percent = percent;\n}\n\nexport function setDefaultDecimalSeparator(decimalSeparator: string) {\n  defaultOptions.decimalSeparator = decimalSeparator;\n}\n\nexport default NumericInput;\n","import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/dados/private/react-enhanced-numeric-input/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from \"docz\";\nimport NumericInput from \"../src/NumericInput.tsx\";\nimport \"./styles.css\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"numericinput\"\n    }}>{`NumericInput`}</h1>\n    <Props of={NumericInput} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic Usage`}</h2>\n    <Playground __position={1} __code={'<NumericInput />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      NumericInput\n    }} mdxType=\"Playground\">\n  <NumericInput mdxType=\"NumericInput\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"defining-decimal-precision\"\n    }}>{`Defining decimal precision`}</h2>\n    <Playground __position={2} __code={'<NumericInput decimalPrecision={2} value={50} />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      NumericInput\n    }} mdxType=\"Playground\">\n  <NumericInput decimalPrecision={2} value={50} mdxType=\"NumericInput\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"decimal-precision-and-maxlength\"\n    }}>{`Decimal precision and maxLength`}</h2>\n    <Playground __position={3} __code={'<NumericInput decimalPrecision={2} maxLength={4} value={99999999} />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      NumericInput\n    }} mdxType=\"Playground\">\n  <NumericInput decimalPrecision={2} maxLength={4} value={99999999} mdxType=\"NumericInput\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"formatting-input-as-money\"\n    }}>{`Formatting input as money`}</h2>\n    <Playground __position={4} __code={'<NumericInput decimalPrecision={2} maxLength={4} value={9} money />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      NumericInput\n    }} mdxType=\"Playground\">\n  <NumericInput decimalPrecision={2} maxLength={4} value={9} money mdxType=\"NumericInput\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"formatting-input-as-percent\"\n    }}>{`Formatting input as percent`}</h2>\n    <Playground __position={5} __code={'<NumericInput decimalPrecision={2} value={90} percent />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      NumericInput\n    }} mdxType=\"Playground\">\n  <NumericInput decimalPrecision={2} value={90} percent mdxType=\"NumericInput\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"calling-functions-on-events-onblur-onchange\"\n    }}>{`Calling functions on events (onBlur, onChange)`}</h2>\n    <Playground __position={6} __code={'<NumericInput\\n  decimalPrecision={2}\\n  id=\\\"tot_debit\\\"\\n  name=\\\"tot_debit\\\"\\n  maxLength={20}\\n  value={503.2}\\n  onChange={e => console.log(e.target.name, e.target.value)}\\n  onBlur={(e, val) => {\\n    console.log(e.target.name, e.target.value)\\n  }}\\n  percent\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      NumericInput\n    }} mdxType=\"Playground\">\n  <NumericInput decimalPrecision={2} id=\"tot_debit\" name=\"tot_debit\" maxLength={20} value={503.2} onChange={e => console.log(e.target.name, e.target.value)} onBlur={(e, val) => {\n        console.log(e.target.name, e.target.value);\n      }} percent mdxType=\"NumericInput\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"decimal-precision-and-maxlength-using-value-onblur\"\n    }}>{`Decimal precision and maxLength using value onBlur`}</h2>\n    <Playground __position={7} __code={'<NumericInput\\n  decimalPrecision={2}\\n  maxLength={4}\\n  value={99999999}\\n  onChange={e => console.log(\\'change\\', e.target.value)}\\n  onBlur={(e, val) => console.log(\\'blur\\', e.target.name, val)}\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      NumericInput\n    }} mdxType=\"Playground\">\n  <NumericInput decimalPrecision={2} maxLength={4} value={99999999} onChange={e => console.log(\"change\", e.target.value)} onBlur={(e, val) => console.log(\"blur\", e.target.name, val)} mdxType=\"NumericInput\" />\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","require(\"core-js/modules/es6.array.is-array\");\n\n/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n\n/* global define */\n(function () {\n  'use strict';\n\n  var hasOwn = {}.hasOwnProperty;\n\n  function classNames() {\n    var classes = [];\n\n    for (var i = 0; i < arguments.length; i++) {\n      var arg = arguments[i];\n      if (!arg) continue;\n      var argType = typeof arg;\n\n      if (argType === 'string' || argType === 'number') {\n        classes.push(arg);\n      } else if (Array.isArray(arg) && arg.length) {\n        var inner = classNames.apply(null, arg);\n\n        if (inner) {\n          classes.push(inner);\n        }\n      } else if (argType === 'object') {\n        for (var key in arg) {\n          if (hasOwn.call(arg, key) && arg[key]) {\n            classes.push(key);\n          }\n        }\n      }\n    }\n\n    return classes.join(' ');\n  }\n\n  if (typeof module !== 'undefined' && module.exports) {\n    classNames[\"default\"] = classNames;\n    module.exports = classNames;\n  } else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n    // register as 'classnames', consistent with npm package name\n    define('classnames', [], function () {\n      return classNames;\n    });\n  } else {\n    window.classNames = classNames;\n  }\n})();"],"sourceRoot":""}